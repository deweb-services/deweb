syntax = "proto3";
package dewebservices.domain;

import "gogoproto/gogo.proto";

option go_package = "github.com/deweb-services/deweb/x/dns_module/types";
option (gogoproto.goproto_getters_all) = false;

// BaseDomain defines a non-fungible domain token
message BaseDomain {
    option (gogoproto.equal) = true;

    string id = 1;
    string data = 2;
    string owner = 3;
}

// Denom defines a type of NFT
message Denom {
    option (gogoproto.equal) = true;

    string id = 1;
    string name = 2;
    string schema = 3;
    string creator = 4;
    string symbol = 5;
    bool mint_restricted = 6 ;
    bool update_restricted = 7 ;
    string description = 8;
    string uri = 9;
    string uri_hash = 10;
    string data = 11;
}

// IDCollection defines a type of collection with specified ID
message IDCollection {
    option (gogoproto.equal) = true;

    string denom_id = 1 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
    repeated string token_ids = 2 [ (gogoproto.moretags) = "yaml:\"token_ids\"" ];
}

// Owner defines a type of owner
message Owner {
    option (gogoproto.equal) = true;

    string address = 1;
    repeated IDCollection id_collections = 2 [ (gogoproto.moretags) = "yaml:\"idcs\"", (gogoproto.customname) = "IDCollections", (gogoproto.nullable) = false ];
}

// Collection defines a type of collection
message Collection {
    option (gogoproto.equal) = true;

    Denom denom = 1 [ (gogoproto.nullable) = false ];
    repeated BaseDomain nfts = 2 [ (gogoproto.customname) = "NFTs", (gogoproto.nullable) = false ];
}