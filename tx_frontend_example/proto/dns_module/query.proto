syntax = "proto3";
package dewebservices.domain.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "dns_module/domain.proto";
import "dns_module/params.proto";

option go_package = "github.com/deweb-services/deweb/x/dns_module/types";

// Query defines the gRPC querier service for NFT module
service Query {
    // Parameters queries the parameters of the module.
    rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
        option (google.api.http).get = "/deweb/domains/v1beta1/params";
    }

    // Query domain info by domain name
    rpc Domain(QueryDomainRequest) returns (QueryDomainResponse) {
        option (google.api.http).get = "/deweb/domains/v1beta1/domain/{domain_name}";
    }
    // Query domains owned by user
    rpc OwnedDomains(QueryOwnedDomainsRequest) returns (QueryOwnedDomainsResponse) {
        option (google.api.http).get = "/deweb/domains/v1beta1/address/{address}";
    }
}

message TransferOffer {
    uint64 price = 1;
    string ExpectedOwnerAddress = 2;
}

message DNSRecords {
    string type = 1;
    repeated string values = 2;
}

message ResponseDomain {
    option (gogoproto.equal) = true;

    string id = 1;
    string issued = 2;
    string validTill = 3;
    TransferOffer transfer_offer = 4;
    repeated DNSRecords records = 5;
    bool subDomainsOnSale = 6;
    uint64 subDomainsSalePrice = 7;
    string owner = 8;
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
    // params holds all the parameters of this module.
    Params params = 1 [(gogoproto.nullable) = false];
}

// QueryNFTRequest is the request type for the Query/NFT RPC method
message QueryDomainRequest {
    string domain_name = 1 [ (gogoproto.moretags) = "yaml:\"domain_name\"" ];
}

// QueryNFTResponse is the response type for the Query/NFT RPC method
message QueryDomainResponse {
    ResponseDomain domain = 1 [ (gogoproto.customname) = "Domain" ];
}

// QueryNFTRequest is the request type for the Query/NFT RPC method
message QueryOwnedDomainsRequest {
    string address = 1;
    int64 offset = 2;
    int64 count = 3;
}

// QueryNFTResponse is the response type for the Query/NFT RPC method
message QueryOwnedDomainsResponse {
    int64 total = 1;
    repeated ResponseDomain domains = 2 [ (gogoproto.customname) = "Domains" ];
}