syntax = "proto3";
package dewebservices.nft;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "nftmodule/nft.proto";
import "nftmodule/params.proto";

option go_package = "github.com/deweb-services/deweb/x/nftmodule/types";

// Query defines the gRPC querier service for NFT module
service Query {
    // Parameters queries the parameters of the module.
    rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
        option (google.api.http).get = "/dns/params";
    }

    // NFT queries the NFT for the given denom and token ID
    rpc Domain(QueryDomainRequest) returns (QueryDomainResponse) {
        option (google.api.http).get = "/dns/domains/{domain_name}";
    }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
    // params holds all the parameters of this module.
    Params params = 1 [(gogoproto.nullable) = false];
}

// QueryNFTRequest is the request type for the Query/NFT RPC method
message QueryDomainRequest {
    string domain_name = 1 [ (gogoproto.moretags) = "yaml:\"domain_name\"" ];
}

// QueryNFTResponse is the response type for the Query/NFT RPC method
message QueryDomainResponse {
    BaseNFT domain = 1 [ (gogoproto.customname) = "Domain" ];
}