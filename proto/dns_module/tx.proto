syntax = "proto3";
package dewebservices.nft;

import "gogoproto/gogo.proto";

option go_package = "github.com/deweb-services/deweb/x/dns_module/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the nft Msg service.
service Msg {
    // MintNFT defines a method for mint a new nft
    rpc RegisterDomain(MsgRegisterDomain) returns (MsgRegisterDomainResponse);

    // RefundHTLC defines a method for editing a nft.
    rpc EditDomain(MsgEditDomain) returns (MsgEditdomainResponse);

    // TransferNFT defines a method for transferring a nft.
    rpc TransferDomain(MsgTransferDomain) returns (MsgTransferDomainResponse);

    // BurnNFT defines a method for burning a nft.
    rpc RemoveDomain(MsgRemoveDomain) returns (MsgRemoveDomainResponse);
}

// MsgTransferNFT defines an SDK message for transferring an NFT to recipient.
message MsgTransferDomain {
    option (gogoproto.equal) = true;

    string id = 1;
    uint64 price= 2;
    bool cancel = 3;
    string sender = 4;
    string recipient = 5;
}

// MsgTransferNFTResponse defines the Msg/TransferNFT response type.
message MsgTransferDomainResponse {}

// MsgEditNFT defines an SDK message for editing a nft.
message MsgEditDomain {
    option (gogoproto.equal) = true;

    string id = 1;
    string data = 2;
    string sender = 3;
}

// MsgEditNFTResponse defines the Msg/EditNFT response type.
message MsgEditdomainResponse {}

// MsgMintNFT defines an SDK message for creating a new NFT.
message MsgRegisterDomain {
    option (gogoproto.equal) = true;

    string id = 1;
    string data = 2;
    string sender = 3;
    string recipient = 4;
}

// MsgMintNFTResponse defines the Msg/MintNFT response type.
message MsgRegisterDomainResponse {}

// MsgBurnNFT defines an SDK message for burning a NFT.
message MsgRemoveDomain {
    option (gogoproto.equal) = true;

    string id = 1;
    string sender = 2;
}

// MsgBurnNFTResponse defines the Msg/BurnNFT response type.
message MsgRemoveDomainResponse {}

